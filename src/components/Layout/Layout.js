import _ from 'lodash';
import PlayerAPI from '../../api';
import React, {Component} from 'react';
import GridLayout from 'react-grid-layout';
import './NavTabsGrid.css';
import {
  Col,
  Container,
  Row,
  Card,
  CardText,
  CardBody,
  CardTitle,
  CardSubtitle,
  Button,
} from 'reactstrap';

/**
 * Non-responsive grid-layout. Contains functions that generates layouts.
 */
class Layout extends Component {
  /**
   * Render the layout items that are generated by genLayout.
   * @param {*} styles The styles that will be applied to the items in the
   * 						layout.
   * @param {*} layout The layout for the items that will be rendered.
   */
  renderLayout(layout) {
    var styles = {
      borderColor: 'red',
      color: 'red',
      width: '400px',
    };
    return _.map(_.range(97, 97 + layout.length), function(i) {
      var genKey = String.fromCharCode(i);
      return (
        <div key={genKey}>
          <Col>
            {/* <div> */}
            {/* <a href="http://www.google.com">
                <p>{genKey}</p>
              </a>
              <span className="recommended">Recommended</span> */}
            <Card styles={styles.width}>
              <CardBody>
                <CardTitle>{genKey}</CardTitle>
                <CardSubtitle>Card substitle</CardSubtitle>
                <CardText>
                  Card text Card text Card text Card text Card text.
                </CardText>
                <Button>Click</Button>
              </CardBody>
            </Card>
            {/* </div> */}
          </Col>
        </div>
      );
    });
  }

  /**
   * Generates the layout for a 3x3 grid in react-grid-layout.
   *
   * TODO:
   * 1. Change the setup parameter to a number.
   * 2. Create logic after the 3x3 logic to generate a 4x4 layout
   * @param {*} length Number of objects to be placed in the layout array.
   * @param {*} keyType Determine how the key is generated, whether numerically
   * 						or alphabetically.
   * @param {*} setup Choose the grid type. Choices are 3x3, 4x4.
   */
  genLayout(length, keyType, setup) {
    // used to ensure that the user doesn't specify more
    // items than
    var counter = 0;

    while (counter < length) {
      // enter 3x3 generation logic if user enters it
      while (setup === '3x3') {
        if (keyType === 'string') {
          return this.genThreeByThreeLayout(length);
        } else if (keyType === 'number') {
          return _.map(_.range(0, length), function(index) {
            return {i: index, x: 0, y: 0, w: 2, h: 2, maxW: 4, mayY: 4};
          });
        }
        counter++;
      }
      // enter 4x4 generation logic if user enters it
      while (setup === '4x4') {
        if (keyType === 'string') {
          return this.genFourByFourLayout(length);
        } else if (keyType === 'number') {
          return _.map(_.range(0, length), function(index) {
            return {i: index, x: 0, y: 0, w: 2, h: 2, maxW: 4, mayY: 4};
          });
        }
        counter++;
      }
    }
  }

  /**
   * Generates a 3x3 layout.
   * @param {*} length
   */
  genThreeByThreeLayout(length) {
    // reset variable to 0
    var rowCounter = 0;
    var colCounter = 0;

    var itemWidth = 3;
    var itemHeight = 5;
    return _.map(_.range(0, length), function(index) {
      if (index % 3 === 0) {
        rowCounter = 0;
      }
      var genKey = String.fromCharCode(97 + index);
      // var xValue = this.threeCounter(index);
      var result = {
        i: genKey,
        x: rowCounter,
        y: colCounter,
        w: itemWidth,
        h: itemHeight,
        maxW: 4,
        mayY: 5,
      };
      rowCounter += itemWidth;
      colCounter += itemHeight;
      return result;
    });
  }

  /**
   * Generate a 4 by 4 layout.
   * @param {*} length
   */
  genFourByFourLayout(length) {
    // reset variable to 0
    var rowCounter = 0;
    var colCounter = 0;

    // specify the item's width. also keeps track of what row the item is on
    var itemWidth = 3;
    // specify the item's height. also keeps track of what col the item is on
    var itemHeight = 5;
    return _.map(_.range(0, length), function(index) {
      if (index % 4 === 0) {
        rowCounter = 0;
      }
      var genKey = String.fromCharCode(97 + index);
      var result = {
        i: genKey,
        x: rowCounter,
        y: colCounter,
        w: itemWidth,
        h: itemHeight,
        maxW: 4,
        mayY: 5,
      };
      rowCounter += itemWidth;
      colCounter += itemHeight;
      console.log('rowCounter = ' + rowCounter);
      console.log('colCounter = ' + colCounter);
      return result;
    });
  }

  render() {
    // Generate a layout with 26 items, with numerical keys, that is 3x3
    // var threeByThreeLayout = this.genLayout(26, "string", "3x3");

    // Generate a layout with 26 items, with alphabetical keys, that is 4x4
    var fourByFourLayout = this.genLayout(30, 'string', '4x4');

    return (
      <GridLayout
        className="layout"
        layout={fourByFourLayout}
        cols={12}
        rowHeight={30}
        width={1200}
      >
        {this.renderLayout(fourByFourLayout)}
      </GridLayout>
    );
  }
}

export default Layout;
