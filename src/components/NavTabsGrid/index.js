import _ from 'lodash';
import React, { Component } from 'react';
import GridLayout from 'react-grid-layout';
import style from './NavTabsGrid.css';

/**
 * Non-responsive grid-layout. Contains a generate layout
 * function. 
 */
class NavTabsGrid extends Component {

	/**
	 * Render the layout items that are generated by genLayout. 
	 * @param {*} styles The styles that will be applied to the items in the 
	 * 						layout.
	 * @param {*} layout The layout for the items that will be rendered. 
	 */
	renderLayout(styles, layout) {
		return _.map(_.range(97, 97 + layout.length), function(i) {
			var genKey = String.fromCharCode(i);	
			return (
				<div key={genKey} className={styles.itemDiv}>
					<div>
						<p className={styles.itemText}>{genKey }</p>
				</div>
				</div>
			);
		});
	}

	/**
	 * 
	 * @param {*} length Number of objects to be placed in the layout array. 
	 * @param {*} keyType Determine how the key is generated, whether numerically
	 * 						or alphabetically.
	 * @param {*} setup Choose the grid type. Choices are 3x3, 4x4. 
	 */
	genLayout(length, keyType, setup) {
		// used to ensure that the user doesn't specify more
		// items than 
		var counter = 0; 

		while (counter < length) {
			while (setup === "3x3") {
				if (keyType === "string") {
					return this.genThreeByThreeLayout(length);
				} else if (keyType === "number") {
					return _.map(_.range(0, length), function(index) {
						return {i: index, x: 0, y: 0, w: 2, h: 2, maxW: 4, mayY: 4};
					});
				}
				counter++;
			}
		}
	}

	/**
	 * Generates any layout you want.
	 * @param {*} length 
	 */
	genThreeByThreeLayout(length) {
		// reset variable to 0
		var rowCounter = 0;
		var colCounter = 0;
		
		var itemWidth = 3;
		var itemHeight = 4;
		return _.map(_.range(0, length), function(index) {
			if (index % 3 === 0) {
				rowCounter = 0;
			} 
			var genKey = String.fromCharCode(97 + index);
				// var xValue = this.threeCounter(index);
				var result =  {i: genKey, x: rowCounter, y: colCounter, w: itemWidth, h: itemHeight, maxW: 4, mayY: 4};
				rowCounter += itemWidth;
				colCounter += itemHeight;
				return result;
		});
	}

	
	
	render() {
		var layout = this.genLayout(26, "string", "3x3");
		
		return(
			<GridLayout className="layout" layout={layout} cols={12}
			rowHeight={30} width={1200}>
				{this.renderLayout(style, layout)}
			</GridLayout>
		); 
	}
}

export default NavTabsGrid;